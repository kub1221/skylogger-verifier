<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>Sky Logger – Debug Verifier (v3)</title>
<style>
  body{background:#111;color:#fff;font-family:system-ui,sans-serif;padding:20px}
  h1{color:#7ec8ff;font-size:22px;margin:0 0 16px}
  .card{background:#1c1c1c;border-radius:12px;padding:16px;box-shadow:0 0 16px rgba(0,0,0,.35)}
  .ok{color:#2ecc71;font-weight:bold}
  .fail{color:#ff7675;font-weight:bold}
  pre{background:#222;padding:10px;border-radius:8px;white-space:pre-wrap}
</style>
</head>
<body>
  <h1>🔍 Sky Logger – Debug Verifier (v3)</h1>
  <input id="file" type="file" accept="image/*" />
  <canvas id="canvas" style="max-width:100%;display:block;margin-top:12px"></canvas>
  <div class="card">
    <b>ログ出力：</b>
    <pre id="log">(ここに進行状況が表示されます)</pre>
  </div>

<!-- ✅ jsQRライブラリ -->
<script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js"></script>

<script>
const fileInput = document.getElementById("file");
const canvas = document.getElementById("canvas");
const ctx = canvas.getContext("2d");
const log = (msg) => {
  const box = document.getElementById("log");
  box.textContent += msg + "\n";
  console.log(msg);
};

// ==== GitHub設定 ====
const OWNER  = "kub1221";
const REPO   = "sky-logger-hashes";
const BRANCH = "main";

// ==== GitHubハッシュ照合 ====
async function verifyOnGitHub(fileName, qrHash){
  if (!fileName || !qrHash) return {ok:false, reason:"file/hash 不足"};
  const m = fileName.match(/_([0-9a-f-]{36})\.json$/i);
  if(!m) return {ok:false, reason:"videoId抽出失敗"};
  const videoId = m[1];
  const url = `https://raw.githubusercontent.com/${OWNER}/${REPO}/${BRANCH}/hashes/${videoId}.txt`;
  try{
    const res = await fetch(url, {cache:'no-store'});
    if(!res.ok) return {ok:false, reason:`GitHub応答エラー (${res.status})`};
    const text = (await res.text()).trim();
    const ok = text.includes(qrHash);
    return {ok, reason: ok ? "一致" : "不一致", videoId, remote:text};
  }catch(e){
    return {ok:false, reason:"GitHub取得失敗: "+e};
  }
}

// ==== QR解析 ====
fileInput.addEventListener("change", async (ev)=>{
  const f = ev.target.files?.[0];
  if(!f){ log("❌ ファイル未選択"); return; }

  log(`🗂 ファイル名: ${f.name}`);
  const img = new Image();
  img.onload = async ()=>{
    log("✅ 画像読み込み成功");
    canvas.width = img.width;
    canvas.height = img.height;
    ctx.drawImage(img,0,0);
    const imageData = ctx.getImageData(0,0,canvas.width,canvas.height);
    log(`🧩 画像サイズ: ${canvas.width}x${canvas.height}`);

    const code = jsQR(imageData.data, canvas.width, canvas.height);
    if(code){
      log(`✅ QR解析成功: ${code.data.slice(0,200)}...`);
      try{
        const u = new URL(code.data);
        const p = u.searchParams;
        const file = p.get('file');
        const hash = p.get('hash');
        const v = await verifyOnGitHub(file, hash);
        log(v.ok ? `✅ GitHub照合PASS (${v.reason})` : `❌ GitHub照合FAIL (${v.reason})`);
      }catch(e){
        log("⚠️ QR内容解析エラー: " + e);
      }
    }else{
      log("❌ QR解析失敗（jsQRがコードを検出できませんでした）");
    }
  };
  img.onerror = e => log("❌ 画像読み込み失敗: " + e);
  img.src = URL.createObjectURL(f);
});
</script>
</body>
</html>